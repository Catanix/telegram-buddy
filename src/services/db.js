import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import path from 'path';
import fs from 'fs';

export let db;

export async function initDB() {
    const dbPath = path.resolve('./data/db/tasks.sqlite');
    const dbDir = path.dirname(dbPath);

    try {
        // ‚úÖ –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fs.existsSync(dbDir)) {
            fs.mkdirSync(dbDir, { recursive: true });
            console.log(`üìÅ Created DB directory: ${dbDir}`);
        }

        // ‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db = await open({
            filename: dbPath,
            driver: sqlite3.Database,
        });

        // ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É tasks, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await db.exec(`
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                text TEXT,
                remind_at TEXT,
                created_at TEXT,
                notified INTEGER DEFAULT 0
            );
        `);

        // ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É user_stats –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        await db.exec(`
            CREATE TABLE IF NOT EXISTS user_stats (
                user_id INTEGER NOT NULL,
                service TEXT NOT NULL,
                usage_count INTEGER DEFAULT 1,
                PRIMARY KEY (user_id, service)
            );
        `);
    } catch (error) {
        console.error('‚ùå Failed to initialize database:', error);
        process.exit(1);
    }
}

// üìä –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export async function incrementStats(userId, service) {
    try {
        await db.run(`
            INSERT INTO user_stats (user_id, service, usage_count)
            VALUES (?, ?, 1)
            ON CONFLICT(user_id, service) DO UPDATE SET
            usage_count = usage_count + 1;
        `, [userId, service]);
    } catch (error) {
        console.error(`‚ùå Failed to increment stats for service ${service}:`, error);
    }
}

// üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function getStats(userId) {
    try {
        return await db.all('SELECT service, usage_count FROM user_stats WHERE user_id = ?', [userId]);
    } catch (error) {
        console.error(`‚ùå Failed to get stats for user ${userId}:`, error);
        return [];
    }
}
