import fs from 'fs';
import path from 'path';
import fetch from 'node-fetch';
import { v4 as uuidv4 } from 'uuid';
import { convertToWav } from '../../utils/convertToWav.js';
import { transcribeOffline } from '../../utils/transcribeOffline.js';
import { insertTask } from '../../models/TaskModel.js';
import { formatDateForDisplay } from '../../utils/dateUtils.js';
import { incrementStats } from '../../services/db.js';
import { askLM } from "../../services/api/lm_api.js";

const pendingTasks = new Map();

export async function voiceHandler(ctx) {
    const fileId = ctx.message.voice.file_id;
    const fileLink = await ctx.telegram.getFileLink(fileId);

    const tmpDir = 'tmp';
    const oggPath = path.join(tmpDir, `${fileId}.ogg`);
    const wavPath = path.join(tmpDir, `${fileId}.wav`);

    try {
        const res = await fetch(fileLink);
        const buffer = await res.arrayBuffer();
        fs.writeFileSync(oggPath, Buffer.from(buffer));

        await convertToWav(oggPath, wavPath);
        const transcript = await transcribeOffline(wavPath);

        if (!transcript) return await ctx.reply('ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.');

        const { task, time } = await askLM(transcript);
        if (!task || !time) return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–∞–¥–∞—á—É –∏ –≤—Ä–µ–º—è.');

        const taskId = uuidv4().slice(0, 8);
        pendingTasks.set(taskId, { task, time });

        const imagePath = path.resolve('src/assets/images/yukiTask.png');
        const formattedTime = formatDateForDisplay(time);

        await ctx.replyWithPhoto(
            { source: fs.readFileSync(imagePath) },
            {
                caption: `ü´° –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:\n*üëâüèª${task}*\nüïí *${formattedTime}*`,
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [[
                        { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `confirm_${taskId}` }
                    ]]
                }
            }
        );
    } catch (err) {
        console.error('[VoiceHandler Error]', err);
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    } finally {
        fs.existsSync(oggPath) && fs.unlinkSync(oggPath);
        fs.existsSync(wavPath) && fs.unlinkSync(wavPath);
    }
}

export function setupConfirmHandler(bot) {
    bot.on('callback_query', async (ctx) => {
        const data = ctx.callbackQuery.data;
        if (!data.startsWith('confirm_')) return;

        const taskId = data.slice('confirm_'.length);
        const entry = pendingTasks.get(taskId);
        if (!entry) return await ctx.answerCbQuery('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true });

        const { task, time } = entry;
        try {
            await insertTask(ctx.chat.id, task, time);
            await incrementStats(ctx.from.id, 'task'); // üìä Increment stats
            await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
            await ctx.reply(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\nüìã ${task}\nüïí ${formatDateForDisplay(time)}`);
            await ctx.answerCbQuery();
        } catch (e) {
            console.error('[Task Save Error]', e);
            await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
            await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', { show_alert: true });
        }
        pendingTasks.delete(taskId);
    });
}
