import fs from 'fs';
import path from 'path';
import { getOverdueTasks, markTaskAsNotified, cleanupOldTasks } from '../models/TaskModel.js';
import { formatDateForCIS } from '../utils/dateParser.js';

export async function startScheduler(bot) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await checkExistingTasks(bot);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    setInterval(async () => {
        try {
            await checkDueTasks(bot);
            await cleanupOldTasks(); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        } catch (err) {
            console.error('[Scheduler Error]', err);
        }
    }, 60 * 1000); // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª
async function checkDueTasks(bot) {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª...');
        const now = new Date();
        console.log(`üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}`);

        const tasks = await getOverdueTasks();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`);

        for (const task of tasks) {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}: "${task.text}" (—Å—Ä–æ–∫: ${task.remind_at})`);

            try {
                const imagePath = path.resolve('src/assets/images/yukiTele.png');
                const formattedMessage =
                    `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n` +
                    `‚úÖ ${task.text}\n` +
                    `üïí –î–∞—Ç–∞: ${formatDateForCIS(task.remind_at)}`;

                await bot.telegram.sendPhoto(
                    task.chat_id,
                    { source: fs.readFileSync(imagePath) },
                    { caption: formattedMessage }
                );
                console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}`);

                await markTaskAsNotified(task.id);
                console.log(`‚úì –ó–∞–¥–∞—á–∞ ${task.id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–∞—è`);
            } catch (sendError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}:`, sendError);
            }
        }
    } catch (err) {
        console.error('[Check Due Tasks Error]', err);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async function checkExistingTasks(bot) {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞...');
        const now = new Date();
        console.log(`üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}`);

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const overdueTasks = await getOverdueTasks();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${overdueTasks.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á`);

        if (overdueTasks.length > 0) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
            for (const task of overdueTasks) {
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ ${task.id}: "${task.text}" (—Å—Ä–æ–∫: ${task.remind_at})`);

                try {
                    const imagePath = path.resolve('src/assets/images/yukiTele.png');
                    const formattedMessage =
                        `‚ö†Ô∏è –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞\n\n` +
                        `–ó–∞–¥–∞—á–∞:\n\n` +
                        `${task.text}\n\n` +
                        `üïí –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${formatDateForCIS(task.remind_at)}`;

                    await bot.telegram.sendPhoto(
                        task.chat_id,
                        { source: fs.readFileSync(imagePath) },
                        { caption: formattedMessage }
                    );
                    console.log(`‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ ${task.id}`);

                    await markTaskAsNotified(task.id);
                    console.log(`‚úì –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ ${task.id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–∞—è`);
                } catch (sendError) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ ${task.id}:`, sendError);
                }
            }
        } else {
            console.log('‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }

        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');
        await cleanupOldTasks();
        console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã');

        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (err) {
        console.error('[Check Existing Tasks Error]', err);
    }
}
