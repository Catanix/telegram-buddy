import fs from 'fs';
import path from 'path';
import { getCurrentMinuteTasks, markTaskAsNotified, cleanupOldTasks, getOverdueTasks } from '../models/TaskModel.js';
import { formatDateForDisplay } from '../utils/dateUtils.js';

export async function startScheduler(bot) {
    await checkExistingTasks(bot);

    setInterval(async () => {
        try {
            await cleanupOldTasks();
            await checkDueTasks(bot);
        } catch (err) {
            console.error('[Scheduler Error]', err);
        }
    }, 5 * 1000);
}

async function checkDueTasks(bot) {
    try {
        const tasks = await getCurrentMinuteTasks();
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É`);

        for (const task of tasks) {
            try {
                const imagePath = path.resolve('src/assets/images/yukiTele.png');
                const formattedMessage =
                    `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n` +
                    `‚úÖ ${task.text}\n` +
                    `üïí –î–∞—Ç–∞: ${formatDateForDisplay(task.remind_at)}`;

                await bot.telegram.sendPhoto(
                    task.chat_id,
                    { source: fs.readFileSync(imagePath) },
                    { caption: formattedMessage }
                );
                console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}`);

                await markTaskAsNotified(task.id);
            } catch (sendError) {
                console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}:`, sendError);
            }
        }
    } catch (err) {
        console.error('[Check Due Tasks Error]', err);
    }
}

async function checkExistingTasks(bot) {
    try {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞');

        await cleanupOldTasks();

        const dueTasks = await getCurrentMinuteTasks();
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${dueTasks.length} –∑–∞–¥–∞—á –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â—É—é –º–∏–Ω—É—Ç—É`);

        if (dueTasks.length > 0) {
            for (const task of dueTasks) {
                try {
                    const imagePath = path.resolve('src/assets/images/yukiTele.png');
                    const formattedMessage =
                        `üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n` +
                        `‚úÖ ${task.text}\n` +
                        `üïí –î–∞—Ç–∞: ${formatDateForDisplay(task.remind_at)}`;

                    await bot.telegram.sendPhoto(
                        task.chat_id,
                        { source: fs.readFileSync(imagePath) },
                        { caption: formattedMessage }
                    );
                    console.log(`–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}`);

                    await markTaskAsNotified(task.id);
                } catch (sendError) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.id}:`, sendError);
                }
            }
        }
    } catch (err) {
        console.error('[Check Existing Tasks Error]', err);
    }
}
